# Importa classes base para definir interfaces em Python
from abc import ABC, abstractmethod

# ========================================
# üìê Interface para o reposit√≥rio de usu√°rios
# ========================================
class IUserRepository(ABC):
    # M√©todo abstrato: toda classe que herdar dessa interface
    # ser√° obrigada a implementar este m√©todo
    @abstractmethod
    def save(self, user):
        pass

    # Outro m√©todo abstrato: deve retornar todos os usu√°rios
    @abstractmethod
    def get_all(self):
        pass


# ====================================================
# üóÑÔ∏è Reposit√≥rio: simula o banco de dados em mem√≥ria
# ====================================================
class UserRepository:
    def __init__(self):
        # Lista interna usada como "banco de dados"
        self.dados = []

    # Salva um usu√°rio na lista
    def save(self, user):
        self.dados.append(user)  # Adiciona o usu√°rio na lista
        return user  # Retorna o usu√°rio salvo

    # Retorna todos os usu√°rios salvos na lista
    def get_all(self):
        return self.dados
    

# ====================================================
# üöÄ Execu√ß√£o simples (simulando um cadastro)
# ====================================================

# Instanciando o reposit√≥rio de usu√°rios (banco simulado)
user_repository = UserRepository()

# Criando um dicion√°rio representando um usu√°rio
user = {
    'name': 'Leonardo',
    'email': 'leo@gmail.com',
    'password': '123456'
}

# Salvando o usu√°rio no reposit√≥rio
user_repository.save(user)

# Mostrando todos os usu√°rios armazenados
print(user_repository.get_all())
